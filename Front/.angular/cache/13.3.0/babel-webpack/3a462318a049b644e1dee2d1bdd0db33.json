{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { PATTERNS } from '../constants/input-data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/comunication/comunication.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\n\nfunction InputComponent_div_4_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1, \"Debes ingresar un valor valido.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction InputComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"div\", 8)(2, \"label\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, InputComponent_div_4_span_5_Template, 2, 0, \"span\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(item_r1.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", item_r1.id)(\"type\", item_r1.type)(\"formControlName\", item_r1.form);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.inputValidate(item_r1.form));\n  }\n}\n\nexport let InputComponent = /*#__PURE__*/(() => {\n  class InputComponent {\n    constructor(comunicator, fb, ruta) {\n      this.comunicator = comunicator;\n      this.fb = fb;\n      this.ruta = ruta;\n      this.enviarDatePadre = new EventEmitter();\n    }\n\n    ngOnInit() {\n      console.log(this.idC);\n\n      if (Number(this.idC) == 1) {\n        this.loadInputCondition();\n      } else {\n        this.loadInput();\n      }\n\n      this.comunicator.enviarMenesajeObservable.subscribe(response => {\n        this.datosTable = response;\n        this.settInputs();\n      });\n    }\n\n    settInputs() {\n      this.form.patchValue({\n        name: this.datosTable.Nombres,\n        lastname: this.datosTable.Apellidos,\n        genere: this.datosTable.Genero,\n        age: this.datosTable.Edad,\n        email: this.datosTable.Correo,\n        id: this.datosTable.Id\n      });\n    }\n\n    loadInputCondition() {\n      this.form = this.fb.group({\n        condicion: ['', Validators.compose([Validators.required, Validators.pattern(PATTERNS.onlyLetters)])],\n        fechaD: ['', Validators.compose([Validators.required])],\n        medicina: ['', Validators.compose([Validators.required, Validators.pattern(PATTERNS.onlyLetters)])],\n        nAplic: ['', Validators.compose([Validators.required, Validators.pattern(PATTERNS.onlyNumbers)])],\n        textarea: ['', Validators.compose([Validators.required, Validators.pattern(PATTERNS.email)])],\n        id: ['', Validators.compose([Validators.required, Validators.pattern(PATTERNS.onlyNumbers)])],\n        notas: ['', Validators.compose([Validators.required])]\n      });\n    }\n\n    loadInput() {\n      this.form = this.fb.group({\n        name: ['', Validators.compose([Validators.required, Validators.pattern(PATTERNS.onlyLetters)])],\n        lastname: ['', Validators.compose([Validators.required, Validators.pattern(PATTERNS.onlyLetters)])],\n        genere: ['', Validators.compose([Validators.required, Validators.pattern(PATTERNS.onlyLetters)])],\n        age: ['', Validators.compose([Validators.required, Validators.pattern(PATTERNS.onlyNumbers)])],\n        email: ['', Validators.compose([Validators.required, Validators.pattern(PATTERNS.email)])],\n        id: ['', Validators.compose([Validators.required, Validators.pattern(PATTERNS.onlyNumbers)])]\n      });\n    }\n\n    inputValidate(formValue) {\n      return this.form.get(formValue).invalid && this.form.get(formValue).touched;\n    }\n\n    enable() {\n      this.enableButtonInput = true;\n    }\n\n    send() {\n      let valores = {\n        Id: Number(this.form.get(\"id\").value),\n        Nombres: this.form.get(\"name\").value,\n        Apellidos: this.form.get(\"lastname\").value,\n        Genero: this.form.get(\"genere\").value,\n        Edad: Number(this.form.get(\"age\").value),\n        Correo: this.form.get(\"email\").value\n      };\n      this.enviarDatePadre.emit(valores);\n    }\n\n  }\n\n  InputComponent.ɵfac = function InputComponent_Factory(t) {\n    return new (t || InputComponent)(i0.ɵɵdirectiveInject(i1.ComunicationService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n\n  InputComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InputComponent,\n    selectors: [[\"app-input\"]],\n    inputs: {\n      inputValue: \"inputValue\",\n      enableButtonInput: \"enableButtonInput\",\n      validation: \"validation\",\n      data: \"data\",\n      idC: \"idC\"\n    },\n    outputs: {\n      enviarDatePadre: \"enviarDatePadre\"\n    },\n    decls: 8,\n    vars: 3,\n    consts: [[\"id\", \"input-body\", 1, \"inputs\"], [\"autocomplete\", \"off\", 3, \"formGroup\", \"ngSubmit\"], [1, \"input-body\"], [1, \"form-data\"], [\"class\", \"inputs-data\", 4, \"ngFor\", \"ngForOf\"], [1, \"buttons\"], [\"type\", \"submit\", 1, \"save\", 3, \"disabled\"], [1, \"inputs-data\"], [1, \"inputLabel\"], [\"for\", \"\"], [3, \"id\", \"type\", \"formControlName\"], [\"class\", \"error-menssage\", 4, \"ngIf\"], [1, \"error-menssage\"]],\n    template: function InputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function InputComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.send();\n        });\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3);\n        i0.ɵɵtemplate(4, InputComponent_div_4_Template, 6, 5, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 5)(6, \"button\", 6);\n        i0.ɵɵtext(7, \"Guardar\");\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.inputValue);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.form.invalid);\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i4.NgForOf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i4.NgIf],\n    styles: [\".inputs[_ngcontent-%COMP%]{padding:3rem 5rem;transition:max-height .2s ease-out;box-shadow:.2rem .1rem 1.4rem #00000040}.inputs[_ngcontent-%COMP%]   .input-body[_ngcontent-%COMP%]{display:flex;flex-direction:column}.inputs[_ngcontent-%COMP%]   .form-data[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(3,1fr);grid-gap:5rem;gap:5rem}.inputs[_ngcontent-%COMP%]   .form-data[_ngcontent-%COMP%]   .inputLabel[_ngcontent-%COMP%]{display:flex;flex-direction:column}.inputs[_ngcontent-%COMP%]   .form-data[_ngcontent-%COMP%]   .inputLabel[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:none;margin-top:1rem;border-bottom:.1rem solid black;outline:none;font-size:2rem;font-weight:700}.inputs[_ngcontent-%COMP%]   .form-data[_ngcontent-%COMP%]   .inputLabel[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-size:1.7rem}.buttons[_ngcontent-%COMP%]{align-self:flex-end;margin-top:3rem}.buttons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:1rem 5rem;margin-right:2rem;background-color:#fff;font-weight:800;border:.1rem solid}.buttons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{box-shadow:.2rem .1rem 1.4rem #00000040;cursor:pointer;transform:scale(1.02)}.buttons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:last-of-type{margin-right:0}\"]\n  });\n  return InputComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}